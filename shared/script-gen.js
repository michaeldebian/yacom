(function() {

  var SERVERS_URL;

  if (typeof module !== 'undefined') {
    module.exports.renderScript = renderScript;
    SERVERS_URL = require('../config').baseUrl;
  } else {
    window.Yacom = window.Yacom || {};
    window.Yacom.renderScript = renderScript;
    SERVERS_URL = $('meta[name="yacom:base-url"]').attr('content');
  }

  SERVERS_URL += '/servers/';

  var PACKAGE_MANAGERS = {
    1: 'apt-get -y',
    2: 'yum -y',
    3: 'zypper --non-interactive'
  };

  var HEADER = '#!/bin/bash\n# Autogenerated by YACOM\n';

  var SCRIPT_START_CODE = '\nyc-log "Running... Log: $YACOM_LOG"\n' +
    'curl -s -S -X POST "$YACOM_SERVER_URL/executions" > /dev/null\n' +
    '\n(\n' +
    '\n  # Stop script if anything fails\n' +
    '  set -e\n';
  var SCRIPT_END_CODE = '\n)\n' +
    '\nexport YACOM_EXIT_CODE=$?\n\n' +
    'yc-log "Finished with exit code $YACOM_EXIT_CODE. Uploading logs..."\n' +
    'curl -s -S -X PUT -d exitCode=$YACOM_EXIT_CODE -d log="`cat $YACOM_LOG`" "$YACOM_SERVER_URL/execution" > /dev/null\n' +
    'yc-log "Done. Log: $YACOM_LOG"';

  var UTIL_CODE = '\n# Log all output to log file\n' +
    'export YACOM_LOG="$PWD/yacom-$(date +"%Y%m%d%H%M%S").log"\n\n' +
    'exec > >(tee -a $YACOM_LOG)\n' +
    'exec 2>&1\n' +
    '\n' +
    '# Utility code\n' +
    'function yc-log {\n' +
    '  echo \"[YACOM] $(date +\"%Y-%m-%d %H:%M:%S\"): $1\"\n' +
    '}\n' +
    '\n' +
    'function yc-stage {\n' +
    '  export YACOM_STAGE=$1\n' +
    '  curl -s -S -X PUT -d stage=$YACOM_STAGE "$YACOM_SERVER_URL/execution" > /dev/null\n' +
    '  echo\n' +
    '  yc-log \"Starting stage $1...\"\n' +
    '}\n' +
    '\n' +
    'function yc-stage-end {\n' +
    '  curl -s -S -X PUT -d stageEnded="true" "$YACOM_SERVER_URL/execution" > /dev/null\n' +
    '  yc-log \"Stage $YACOM_STAGE ended\"\n' +
    '  echo\n' +
    '}\n' +
    '# Utility code end\n';

  function indent(string, identation) {
    identation = identation || '  ';
    var lines = string.split('\n');

    for (var i = 0, l = lines.length; i < l; i++) {
      lines[i] = identation + lines[i];
    }

    return lines.join('\n');
  }

  function scriptStage(name, header, fn) {
    var code = '\n# ' + header + '\n';
    code += 'yc-stage ' + name + '\n';
    code += fn('');
    code += 'yc-stage-end\n';
    return code;
  }

  function renderScript(serverData) {
    var script = HEADER;

    if (serverData.serverName || serverData.ipAddress) {
      script += '\n# Server information\n';

      if (serverData.serverName) {
        script += '#\tName: ' + serverData.serverName + '\n';
      }

      if (serverData.ipAddress) {
        script += '#\tIP: ' + serverData.ipAddress + '\n';
      }
    }

    script += UTIL_CODE;
    script += '\nexport YACOM_SERVER_URL="' + SERVERS_URL + (serverData.id || ':id') + '"\n';
    script += SCRIPT_START_CODE;

    var varCode = '';

    if (serverData.osPackages && serverData.osPackages.length) {
      var osPackages = serverData.osPackages;

      if (osPackages.constructor !== Array) {
        osPackages = osPackages.split('\n');
      }

      varCode += scriptStage('os-packages', 'OS Packages', function(code) {
        var packageManager = PACKAGE_MANAGERS[serverData.osVersion];

        for (var p = 0, l = osPackages.length; p < l; p++) {
          code += packageManager + ' install ' + osPackages[p] + '\n';
        }

        return code;
      });
    }

    if (serverData.gitUrl && serverData.gitUrl.length) {
      varCode += scriptStage('project-setup', 'Git project setup', function(code) {
        code += 'curl -s -S -o ~/.ssh/id_rsa $YACOM_SERVER_URL/ssh-key\nchmod 0600 ~/.ssh/id_rsa\n\n';

        if (serverData.deploymentPath) {
          code += 'cd ' + serverData.deploymentPath + '\n';
        }

        return code + 'git clone ' + serverData.gitUrl + '\n';
      });
    }

    if (serverData.developerPackages && serverData.developerPackages.length) {
      varCode += scriptStage('dev-packages', 'Developer packages', function(code) {
        code += 'su - ' + serverData.deployerUser + ' -C "' + serverData.developerPackages.replace(/\n/g, '; ').replace(/"/g, '\\\"') + '"\n';
        return code;
      });
    }

    script += indent(varCode);
    script += SCRIPT_END_CODE;

    return script;
  }

})();
